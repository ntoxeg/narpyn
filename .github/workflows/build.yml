name: build

on:
    push:
        tags:
            - v*
        branches:
            - main
    pull_request:
        branches:
            - main

concurrency:
    group: build-${{ github.head_ref }}
    cancel-in-progress: true

defaults:
    run:
        shell: bash

env:
    STABLE_PYTHON_VERSION: "3.11"
    CIBW_BUILD_FRONTEND: build
    CIBW_ENVIRONMENT_PASS_LINUX: >
        HATCH_BUILD_HOOKS_ENABLE
    CIBW_TEST_COMMAND: >
        python -c
        "from narpyn.ona.narsese import loc;
        assert loc((3, 5)) == 'loc_x3_y5'
        "
    CIBW_SKIP: >
        pp*

jobs:
    binary-wheels-standard:
        name: Binary wheels for ${{ startsWith(matrix.job.os, 'macos-') && 'macOS' || startsWith(matrix.job.os, 'windows-') && 'Windows' || 'Linux' }}
        runs-on: ${{ matrix.job.os }}
        strategy:
            fail-fast: false
            matrix:
                job:
                # Linux
                - target: x86_64-unknown-linux-gnu
                  os: ubuntu-22.04
                  cross: true
                - target: x86_64-unknown-linux-musl
                  os: ubuntu-22.04
                  cross: true
                - target: aarch64-unknown-linux-gnu
                  os: ubuntu-22.04
                  cross: true
                - target: i686-unknown-linux-gnu
                  os: ubuntu-22.04
                  cross: true
                # Windows
                #                    - target: x86_64-pc-windows-msvc
                #                      os: windows-2022
                #                    - target: i686-pc-windows-msvc
                #                      os: windows-2022
                # macOS
                - target: aarch64-apple-darwin
                  os: macos-12
                - target: x86_64-apple-darwin
                  os: macos-12

        steps:
            - uses: actions/checkout@v3
              with:
                  # Fetch all tags
                  fetch-depth: 0
                
            - name: Initialize submodules
              run: git submodule update --init --recursive
            
            - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.STABLE_PYTHON_VERSION }}

            - name: Remove ONA miscellaneous
              run: rm ona/*.py && rm -r ona/misc

#            - name: Install GCC
#              if: matrix.job.os == 'ubuntu-22.04'
#              uses: egor-tensin/setup-gcc@v1
#              with:
#                  version: latest
#                  platform: ${{ startsWith(matrix.job.target, 'x86_64-') && 'x64' || startsWith(matrix.job.target, 'aarch64-') && 'aarch64' || 'x86' }}

            - name: Install GCC
              uses: rlalik/setup-cpp-compiler@master
              with:
                  compiler: gcc-9

            - name: Install Hatch
              run: pip install -U hatch

            - name: Set up cross compiling
              if: matrix.job.cross
              uses: taiki-e/install-action@v2
              with:
                  tool: cross

            - name: Configure cross compiling
              if: matrix.job.cross
              run: echo "CARGO=cross" >> $GITHUB_ENV

            - name: Show toolchain information
              run: |-
                  gcc --version
                  hatch --version

            - name: Build ONA
              run: ./build_ona.sh
            
            - name: Build wheels
              uses: pypa/cibuildwheel@v2.11.4
              env:
                  CIBW_ARCHS_MACOS: x86_64
                  HATCH_BUILD_HOOKS_ENABLE: 'true'
            
#            - name: Build
#              run: hatch -v build --target wheel
            
#            - uses: actions/upload-artifact@v3
#              with:
#                  name: artifacts
#                  path: dist/*.whl
#                  if-no-files-found: error
            
            - uses: actions/upload-artifact@v3
              with:
                  name: artifacts
                  path: wheelhouse/*.whl
                  if-no-files-found: error

    pure-python-wheel-and-sdist:
        name: Build a pure Python wheel and source distribution
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
              with:
                  # Fetch all tags
                  fetch-depth: 0
            
            - name: Initialize submodules
              run: git submodule update --init --recursive
            
            - name: Remove ONA miscellaneous
              run: rm ona/*.py && rm -r ona/misc

            - name: Install build dependencies
              run: python -m pip install --upgrade build

            - name: Build
              run: python -m build

            - uses: actions/upload-artifact@v3
              with:
                  name: artifacts
                  path: dist/*
                  if-no-files-found: error

    binary-wheels-arm:
        name: Build Linux wheels for ARM
        runs-on: ubuntu-latest
        if: >
            github.event_name == 'push'
            &&
            (github.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/tags'))

        steps:
            - uses: actions/checkout@v3
              with:
                  # Fetch all tags
                  fetch-depth: 0

            - name: Initialize submodules
              run: git submodule update --init --recursive
            
            - name: Remove ONA miscellaneous
              run: rm ona/*.py && rm -r ona/misc

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
              with:
                  platforms: arm64

            - name: Build wheels
              uses: pypa/cibuildwheel@v2.11.4
              env:
                  CIBW_ARCHS_LINUX: aarch64
                  HATCH_BUILD_HOOKS_ENABLE: 'true'

            - uses: actions/upload-artifact@v3
              with:
                  name: artifacts
                  path: wheelhouse/*.whl
                  if-no-files-found: error

    publish:
        name: Publish release
        needs:
            - binary-wheels-standard
            - pure-python-wheel-and-sdist
            - binary-wheels-arm
        runs-on: ubuntu-latest
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
        
        steps:
            - uses: actions/download-artifact@v3
              with:
                  name: artifacts
                  path: dist

            - name: Push build artifacts to PyPI
              uses: pypa/gh-action-pypi-publish@v1.6.4
              with:
                  skip_existing: true
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}

#            - uses: actions/download-artifact@v3
#              with:
#                  name: binaries
#                  path: bin

#            - name: Add binary assets to current release
#              uses: softprops/action-gh-release@v1
#              with:
#                  files: bin/*
